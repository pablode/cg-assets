#usda 1.0
(
    doc = "Cornell Box"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root"
{
    matrix4d xformOp:transform = ( (-1, -8.742277657347586e-8, 0, 0), (-3.821371353845884e-15, 4.371138828673793e-8, 1, 0), (-8.742277657347586e-8, 1, -4.371138828673793e-8, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Xform "tall_box_front"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (1.8512493024546365e-29, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "tall_box_front"
        {
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 2, 3, 1]
            normal3f[] normals = [(-0.29620907, 0, -0.9551231), (-0.29620907, 0, -0.9551231), (-0.29620907, 0, -0.9551231), (-0.29620907, 0, -0.9551231)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(2.65, 0, 2.96), (4.23, 0, 2.47), (2.65, 3.3, 2.96), (4.23, 3.3, 2.47)]
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "tall_box_right"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (1.8512493024546365e-29, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "tall_box_right"
        {
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 2, 3, 1]
            normal3f[] normals = [(-0.95616573, 0, 0.2928258), (-0.95616573, 0, 0.2928258), (-0.95616573, 0, 0.2928258), (-0.95616573, 0, 0.2928258)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(3.14, 0, 4.56), (2.65, 0, 2.96), (3.14, 3.3, 4.56), (2.65, 3.3, 2.96)]
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "tall_box_back"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (1.8512493024546365e-29, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "tall_box_back"
        {
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 2, 3, 1]
            normal3f[] normals = [(0.30170894, 0, 0.9534001), (0.30170894, 0, 0.9534001), (0.30170894, 0, 0.9534001), (0.30170894, 0, 0.9534001)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(4.72, 0, 4.06), (3.14, 0, 4.56), (4.72, 3.3, 4.06), (3.14, 3.3, 4.56)]
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "tall_box_left"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (1.8512493024546365e-29, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "tall_box_left"
        {
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 2, 3, 1]
            normal3f[] normals = [(0.95564896, 0, -0.29450804), (0.95564896, 0, -0.29450804), (0.95564896, 0, -0.29450804), (0.95564896, 0, -0.29450804)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(4.23, 0, 2.47), (4.72, 0, 4.06), (4.23, 3.3, 2.47), (4.72, 3.3, 4.06)]
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "tall_box_top"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (1.8512493024546365e-29, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "tall_box_top"
        {
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 2, 3, 1]
            normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(4.23, 3.3, 2.47), (4.72, 3.3, 4.06), (2.65, 3.3, 2.96), (3.14, 3.3, 4.56)]
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "short_box_back"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (1.8512493024546365e-29, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "short_box_back"
        {
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 2, 3, 1]
            normal3f[] normals = [(-0.2851209, 0, 0.95849156), (-0.2851209, 0, 0.95849156), (-0.2851209, 0, 0.95849156), (-0.2851209, 0, 0.95849156)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(2.4, 0, 2.72), (0.82, 0, 2.25), (2.4, 1.65, 2.72), (0.82, 1.65, 2.25)]
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "short_box_right"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (1.8512493024546365e-29, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "short_box_right"
        {
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 2, 3, 1]
            normal3f[] normals = [(-0.95782626, 0, -0.28734785), (-0.95782626, 0, -0.28734785), (-0.95782626, 0, -0.28734785), (-0.95782626, 0, -0.28734785)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.82, 0, 2.25), (1.3, 0, 0.65), (0.82, 1.65, 2.25), (1.3, 1.65, 0.65)]
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "short_box_front"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (1.8512493024546365e-29, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "short_box_front"
        {
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 2, 3, 1]
            normal3f[] normals = [(0.29282576, 0, -0.9561658), (0.29282576, 0, -0.9561658), (0.29282576, 0, -0.9561658), (0.29282576, 0, -0.9561658)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(1.3, 0, 0.65), (2.9, 0, 1.14), (1.3, 1.65, 0.65), (2.9, 1.65, 1.14)]
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "short_box_left"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (1.8512493024546365e-29, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "short_box_left"
        {
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 2, 3, 1]
            normal3f[] normals = [(0.9534001, 0, 0.30170888), (0.9534001, 0, 0.30170888), (0.9534001, 0, 0.30170888), (0.9534001, 0, 0.30170888)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(2.9, 0, 1.14), (2.4, 0, 2.72), (2.9, 1.65, 1.14), (2.4, 1.65, 2.72)]
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "short_box_top"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (1.8512493024546365e-29, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "short_box_top"
        {
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 2, 3, 1]
            normal3f[] normals = [(0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(1.3, 1.65, 0.65), (2.9, 1.65, 1.14), (0.82, 1.65, 2.25), (2.4, 1.65, 2.72)]
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "left_wall"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (1.8512493024546365e-29, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "left_wall"
        {
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 2, 3, 1]
            normal3f[] normals = [(-0.9999576, 0.008746003, -0.002861115), (-0.9999576, 0.008746003, -0.002861115), (-0.9999576, 0.008746003, -0.002861115), (-0.9999576, 0.008746003, -0.002861115)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(5.528, 0, 0), (5.56, 5.488, 0), (5.496, 2.9919925e-15, 5.592), (5.56, 5.488, 5.592)]
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "right_wall"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (1.8512493024546365e-29, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "right_wall"
        {
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 2, 3, 1]
            normal3f[] normals = [(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0, 0, 5.592), (0, 5.488, 5.592), (0, 0, 0), (0, 5.488, 0)]
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "back_wall"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (1.8512493024546365e-29, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "back_wall"
        {
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 3, 2]
            normal3f[] normals = [(-0, 0, -1), (-0, 0, -1), (-0, 0, -1), (-0, 0, -1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0, 0, 5.592), (0, 5.488, 5.592), (5.496, 0, 5.592), (5.56, 5.488, 5.592)]
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "light"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (1.8512493024546365e-29, 0, 1, 0), (9.926187466589415e-27, -0.0010000000474974513, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "light"
        {
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 3, 2]
            normal3f[] normals = [(0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(3.43, 5.488, 3.32), (2.13, 5.488, 3.32), (3.43, 5.488, 2.27), (2.13, 5.488, 2.27)]
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "ceiling"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (1.8512493024546365e-29, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "ceiling"
        {
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 3, 2]
            normal3f[] normals = [(0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(5.56, 5.488, 5.592), (0, 5.488, 5.592), (5.56, 5.488, 0), (0, 5.488, 0)]
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "floor"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (1.8512493024546365e-29, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "floor"
        {
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 3, 2]
            normal3f[] normals = [(0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(5.528, 0, 0), (0, 0, 0), (5.496, 0, 5.592), (0, 0, 5.592)]
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "camera"
    {
        matrix4d xformOp:transform = ( (-1, 0, 1.5099580252808664e-7, 0), (0, 1, 0, 0), (-1.5099580252808664e-7, 0, -1, 0), (2.7799999713897705, 2.7300000190734863, -7.999999523162842, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Camera "camera"
        {
            float2 clippingRange = (0.1, 100)
            float focalLength = 35
            float horizontalAperture = 25
            float horizontalApertureOffset = 0
            token projection = "perspective"
            float verticalAperture = 25
            float verticalApertureOffset = 0
        }
    }
}

